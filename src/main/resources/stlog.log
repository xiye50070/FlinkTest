2022-08-16 09:44:13  [ flink-akka.actor.default-dispatcher-4:1 ] - [ INFO ]  Slf4jLogger started
2022-08-16 09:44:13  [ flink-metrics-6:105 ] - [ INFO ]  Slf4jLogger started
2022-08-16 09:44:14  [ main:490 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 09:44:14  [ main:490 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (2/8)#0:1203 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (7/8)#0:1204 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (6/8)#0:1204 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (8/8)#0:1204 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (4/8)#0:1203 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (5/8)#0:1203 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (3/8)#0:1203 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (1/8)#0:1203 ] - [ WARN ]  The operator name Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (7/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (6/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (8/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (2/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (1/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (5/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (7/8)#0:1233 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (3/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (5/8)#0:1234 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (4/8)#0:1230 ] - [ WARN ]  The operator name Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (1/8)#0:1234 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (3/8)#0:1236 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (4/8)#0:1236 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (2/8)#0:1234 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (8/8)#0:1233 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) -> Calc(select=[CAST(_UTF-16LE'Bob':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS user_name, url], where=[(user_name = _UTF-16LE'Bob')]) -> Sink: Sink(table=[default_catalog.default_database.printOutTable], fields=[user_name, url]) (6/8)#0:1233 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, filter=[equals(user_name, 'Bob')], project=[user_name, url]]], fields=[user_name, url]) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:44:15  [ flink-akka.actor.default-dispatcher-7:1264 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 09:59:46  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 09:59:46  [ flink-metrics-7:97 ] - [ INFO ]  Slf4jLogger started
2022-08-16 09:59:46  [ main:443 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 09:59:46  [ main:443 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 09:59:47  [ GroupAggregate(groupBy=[user], select=[user, COUNT(url) AS cnt]) -> NotNullEnforcer(fields=[cnt]) -> TableToDataSteam(type=ROW<`user` STRING, `cnt` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1115 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user` STRING, `cnt` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 09:59:47  [ Source: Custom Source -> Timestamps/Watermarks -> DataSteamToTable(stream=default_catalog.default_database.Unregistered_DataStream_Source_2, type=*com.wmz.apiTest.waterMark.Event<`user` STRING, `url` STRING, `timestamp` BIGINT>*, rowtime=false, watermark=false) -> Calc(select=[user, url]) (1/1)#0:1132 ] - [ WARN ]  The operator name DataSteamToTable(stream=default_catalog.default_database.Unregistered_DataStream_Source_2, type=*com.wmz.apiTest.waterMark.Event<`user` STRING, `url` STRING, `timestamp` BIGINT>*, rowtime=false, watermark=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:18:13  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:18:13  [ flink-metrics-4:98 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:18:13  [ main:444 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 14:18:13  [ main:445 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 14:18:14  [ GroupAggregate(groupBy=[user_name], select=[user_name, COUNT(*) AS EXPR$1]) -> NotNullEnforcer(fields=[EXPR$1]) -> TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1115 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:18:14  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name]) (1/1)#0:1155 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:18:14  [ flink-akka.actor.default-dispatcher-7:1165 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 14:27:19  [ flink-akka.actor.default-dispatcher-6:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:27:19  [ flink-metrics-7:98 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:27:19  [ main:432 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 14:27:19  [ main:432 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 14:27:20  [ GroupAggregate(groupBy=[user_name], select=[user_name, COUNT(*) AS EXPR$1]) -> NotNullEnforcer(fields=[EXPR$1]) -> TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1120 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:27:20  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name]) (1/1)#0:1157 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:27:20  [ flink-akka.actor.default-dispatcher-6:1169 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 14:27:43  [ flink-akka.actor.default-dispatcher-6:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:27:43  [ flink-metrics-7:101 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:27:44  [ main:438 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 14:27:44  [ main:438 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 14:27:44  [ GroupAggregate(groupBy=[user_name], select=[user_name, COUNT(*) AS EXPR$1]) -> NotNullEnforcer(fields=[EXPR$1]) -> TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1162 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `EXPR$1` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:27:44  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name]) (1/1)#0:1217 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:27:44  [ flink-akka.actor.default-dispatcher-10:1233 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 14:54:33  [ flink-akka.actor.default-dispatcher-4:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:54:33  [ flink-metrics-6:99 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:54:33  [ main:444 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 14:54:33  [ main:444 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 14:54:34  [ LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) (1/1)#0:1135 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:54:34  [ GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1145 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:54:34  [ GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1166 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:54:34  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1178 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:54:34  [ flink-akka.actor.default-dispatcher-6:1183 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 14:58:57  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:58:57  [ flink-metrics-5:98 ] - [ INFO ]  Slf4jLogger started
2022-08-16 14:58:58  [ main:451 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 14:58:58  [ main:452 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 14:58:59  [ LocalWindowAggregate(groupBy=[user_name], window=[HOP(time_col=[et], size=[10 s], slide=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) (1/1)#0:1153 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[HOP(time_col=[et], size=[10 s], slide=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:58:59  [ GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1164 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:58:59  [ GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1184 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:58:59  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1195 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 14:58:59  [ flink-akka.actor.default-dispatcher-9:1203 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 15:01:21  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 15:01:21  [ flink-metrics-7:99 ] - [ INFO ]  Slf4jLogger started
2022-08-16 15:01:22  [ main:437 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 15:01:22  [ main:438 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 15:01:22  [ LocalWindowAggregate(groupBy=[user_name], window=[CUMULATE(time_col=[et], max_size=[10 s], step=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) (1/1)#0:1135 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[CUMULATE(time_col=[et], max_size=[10 s], step=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ LocalWindowAggregate(groupBy=[user_name], window=[HOP(time_col=[et], size=[10 s], slide=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) (1/1)#0:1136 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[HOP(time_col=[et], size=[10 s], slide=[5 s])], select=[user_name, COUNT(*) AS count1$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ GlobalWindowAggregate(groupBy=[user_name], window=[CUMULATE(slice_end=[$slice_end], max_size=[10 s], step=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1147 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1147 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1175 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[HOP(slice_end=[$slice_end], size=[10 s], slide=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ GlobalWindowAggregate(groupBy=[user_name], window=[CUMULATE(slice_end=[$slice_end], max_size=[10 s], step=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, cnt, window_end AS endT]) -> NotNullEnforcer(fields=[cnt, endT]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `endT` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1181 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[CUMULATE(slice_end=[$slice_end], max_size=[10 s], step=[5 s])], select=[user_name, COUNT(count1$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1185 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1189 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:01:22  [ flink-akka.actor.default-dispatcher-5:1191 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 15:45:28  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 15:45:28  [ flink-metrics-6:96 ] - [ INFO ]  Slf4jLogger started
2022-08-16 15:45:28  [ main:438 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 15:45:28  [ main:438 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 15:45:29  [ OverAggregate(partitionBy=[user_name], orderBy=[et ASC], window=[ ROWS BETWEEN 3 PRECEDING AND CURRENT ROW], select=[user_name, ts, et, COUNT(ts) AS w0$o0, $SUM0(ts) AS w0$o1]) -> Calc(select=[user_name, (CASE((w0$o0 > 0:BIGINT), w0$o1, null:BIGINT) / w0$o0) AS avg_ts]) -> TableToDataSteam(type=ROW<`user_name` STRING, `avg_ts` BIGINT> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1123 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `avg_ts` BIGINT> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:45:29  [ OverAggregate(partitionBy=[user_name], orderBy=[et ASC], window=[ ROWS BETWEEN 3 PRECEDING AND CURRENT ROW], select=[user_name, ts, et, COUNT(ts) AS w0$o0, $SUM0(ts) AS w0$o1]) -> Calc(select=[user_name, (CASE((w0$o0 > 0:BIGINT), w0$o1, null:BIGINT) / w0$o0) AS avg_ts]) -> TableToDataSteam(type=ROW<`user_name` STRING, `avg_ts` BIGINT> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1142 ] - [ WARN ]  The operator name Calc(select=[user_name, (CASE((w0$o0 > 0:BIGINT), w0$o1, null:BIGINT) / w0$o0) AS avg_ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:45:29  [ OverAggregate(partitionBy=[user_name], orderBy=[et ASC], window=[ ROWS BETWEEN 3 PRECEDING AND CURRENT ROW], select=[user_name, ts, et, COUNT(ts) AS w0$o0, $SUM0(ts) AS w0$o1]) -> Calc(select=[user_name, (CASE((w0$o0 > 0:BIGINT), w0$o1, null:BIGINT) / w0$o0) AS avg_ts]) -> TableToDataSteam(type=ROW<`user_name` STRING, `avg_ts` BIGINT> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1143 ] - [ WARN ]  The operator name OverAggregate(partitionBy=[user_name], orderBy=[et ASC], window=[ ROWS BETWEEN 3 PRECEDING AND CURRENT ROW], select=[user_name, ts, et, COUNT(ts) AS w0$o0, $SUM0(ts) AS w0$o1]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:45:29  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) -> Calc(select=[user_name, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1152 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable, project=[user_name, ts]]], fields=[user_name, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 15:45:29  [ flink-akka.actor.default-dispatcher-5:1166 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 16:52:24  [ flink-akka.actor.default-dispatcher-4:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 16:52:24  [ flink-metrics-6:96 ] - [ INFO ]  Slf4jLogger started
2022-08-16 16:52:24  [ main:423 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 16:52:24  [ main:424 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 16:52:25  [ Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) -> Calc(select=[user_name, w0$o0]) -> NotNullEnforcer(fields=[row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1121 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:52:25  [ Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) -> Calc(select=[user_name, w0$o0]) -> NotNullEnforcer(fields=[row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1133 ] - [ WARN ]  The operator name Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:52:25  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name, url]) (1/1)#0:1144 ] - [ WARN ]  The operator name Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:52:25  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name, url]) (1/1)#0:1146 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:52:25  [ flink-akka.actor.default-dispatcher-4:1170 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 16:55:51  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 16:55:51  [ flink-metrics-6:95 ] - [ INFO ]  Slf4jLogger started
2022-08-16 16:55:52  [ main:424 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 16:55:52  [ main:424 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 16:55:52  [ Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) -> NotNullEnforcer(fields=[cnt, row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1129 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:55:52  [ Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) -> NotNullEnforcer(fields=[cnt, row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1131 ] - [ WARN ]  The operator name Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, cnt, w0$o0]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:55:52  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name, url]) (1/1)#0:1149 ] - [ WARN ]  The operator name Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:55:52  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, ts, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) -> Calc(select=[user_name, url]) (1/1)#0:1151 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 16:55:53  [ flink-akka.actor.default-dispatcher-9:1176 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 17:26:41  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 17:26:41  [ flink-metrics-5:98 ] - [ INFO ]  Slf4jLogger started
2022-08-16 17:26:41  [ main:427 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 17:26:41  [ main:427 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 17:26:42  [ LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(url) AS count$0, slice_end('w$) AS $slice_end]) (1/1)#0:1116 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(url) AS count$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:26:42  [ WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, w0$o0]) -> Calc(select=[user_name, cnt, w0$o0]) -> NotNullEnforcer(fields=[cnt, row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1129 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:26:42  [ GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, window_start, window_end, cnt]) (1/1)#0:1139 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:26:42  [ WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, w0$o0]) -> Calc(select=[user_name, cnt, w0$o0]) -> NotNullEnforcer(fields=[cnt, row_num]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1143 ] - [ WARN ]  The operator name WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, w0$o0]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:26:42  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1148 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:26:42  [ flink-akka.actor.default-dispatcher-8:1182 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
2022-08-16 17:29:21  [ flink-akka.actor.default-dispatcher-5:0 ] - [ INFO ]  Slf4jLogger started
2022-08-16 17:29:21  [ flink-metrics-7:100 ] - [ INFO ]  Slf4jLogger started
2022-08-16 17:29:22  [ main:429 ] - [ WARN ]  Log file environment variable 'log.file' is not set.
2022-08-16 17:29:22  [ main:429 ] - [ WARN ]  JobManager log files are unavailable in the web dashboard. Log file location not found in environment variable 'log.file' or configuration key 'web.log.path'.
2022-08-16 17:29:22  [ LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(url) AS count$0, slice_end('w$) AS $slice_end]) (1/1)#0:1108 ] - [ WARN ]  The operator name LocalWindowAggregate(groupBy=[user_name], window=[TUMBLE(time_col=[et], size=[10 s])], select=[user_name, COUNT(url) AS count$0, slice_end('w$) AS $slice_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:29:22  [ WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, row_num]) -> Calc(select=[user_name, cnt, row_num, window_end]) -> NotNullEnforcer(fields=[cnt, row_num, window_end]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL, `window_end` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1119 ] - [ WARN ]  The operator name TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL, `window_end` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:29:22  [ GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) -> Calc(select=[user_name, window_start, window_end, cnt]) (1/1)#0:1122 ] - [ WARN ]  The operator name GlobalWindowAggregate(groupBy=[user_name], window=[TUMBLE(slice_end=[$slice_end], size=[10 s])], select=[user_name, COUNT(count$0) AS cnt, start('w$) AS window_start, end('w$) AS window_end]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:29:22  [ WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, row_num]) -> Calc(select=[user_name, cnt, row_num, window_end]) -> NotNullEnforcer(fields=[cnt, row_num, window_end]) -> TableToDataSteam(type=ROW<`user_name` STRING, `cnt` BIGINT NOT NULL, `row_num` BIGINT NOT NULL, `window_end` TIMESTAMP(3) NOT NULL> NOT NULL, rowtime=false) -> Sink: Print to Std. Out (1/1)#0:1133 ] - [ WARN ]  The operator name WindowRank(window=[TUMBLE(win_start=[window_start], win_end=[window_end], size=[10 s])], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[], orderBy=[cnt DESC], select=[user_name, window_start, window_end, cnt, row_num]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:29:22  [ Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) -> Calc(select=[user_name, url, TO_TIMESTAMP(FROM_UNIXTIME((ts / 1000))) AS et]) -> WatermarkAssigner(rowtime=[et], watermark=[(et - 1000:INTERVAL SECOND)]) (1/1)#0:1135 ] - [ WARN ]  The operator name Source: TableSourceScan(table=[[default_catalog, default_database, clickTable]], fields=[user_name, url, ts]) exceeded the 80 characters length limit and was truncated.
2022-08-16 17:29:22  [ flink-akka.actor.default-dispatcher-9:1164 ] - [ WARN ]  No hostname could be resolved for the IP address 127.0.0.1, using IP address as host name. Local input split assignment (such as for HDFS files) may be impacted.
